October 20, 2019
~~~~~~~~~~~~~~~~~~~~
I've amassed enough tools to start building this game. Any more and I would risk writing code that never gets used.
Time to write project-centric code.
To-do: Write the generic high-level abstraction.
Done: October 21, 2019: Wrote Application, StateStack and State abstractions.

October 21, 2019
~~~~~~~~~~~~~~~~~~~~
To-Do: Begin work on the Game state.
Done: October 22,2019: Wrote GameState and even the World class.

October 22, 2019
~~~~~~~~~~~~~~~~~~~~
To-Do: Build a prototype for the rest of the architecture.
Done: October 22, 2019

October 23, 2019
~~~~~~~~~~~~~~~~~~~~
To-Do: Implement the prototypes to attain basic functionality.
Done: The overall architecture of Application/StateStack/State/World/SceneLoader/Scene/PrefabDispenser

A challenge stands before me: how do I add prefabs to my PrefabDispenser class? I have a few solutions in mind:
1. Use the service-locator or singleton pattern, but this would only spread out definitions in my codebase.
2. For each Scene derived class, add a new function `setup`, which is static and called when that scene is registered with the SceneLoader.

First, time to implement CRTP for Scene, as then I should be able to use the static madness with polymorphism.

AAAAND success!

The basic architecture functions! I have learned how to use CRTP, even though some people may frown on binding together the stateless
Scene functions into a class.
Time to design the components for the playable character.

To-Do: Design components for the playable character to begin some semblance of a game.
Done: October 24, 2019: Flicks work. Character is controllable now.

October 24, 2019
~~~~~~~~~~~~~~~~~~~~
To-Do: Attempt to change to an Entity Component System.